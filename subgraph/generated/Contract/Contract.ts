// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CompanyAdded extends ethereum.Event {
  get params(): CompanyAdded__Params {
    return new CompanyAdded__Params(this);
  }
}

export class CompanyAdded__Params {
  _event: CompanyAdded;

  constructor(event: CompanyAdded) {
    this._event = event;
  }

  get walletAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class EcosystemUpdated extends ethereum.Event {
  get params(): EcosystemUpdated__Params {
    return new EcosystemUpdated__Params(this);
  }
}

export class EcosystemUpdated__Params {
  _event: EcosystemUpdated;

  constructor(event: EcosystemUpdated) {
    this._event = event;
  }

  get company1(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get company2(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isPartnership(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Exclude extends ethereum.Event {
  get params(): Exclude__Params {
    return new Exclude__Params(this);
  }
}

export class Exclude__Params {
  _event: Exclude;

  constructor(event: Exclude) {
    this._event = event;
  }

  get includer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get includee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Include extends ethereum.Event {
  get params(): Include__Params {
    return new Include__Params(this);
  }
}

export class Include__Params {
  _event: Include;

  constructor(event: Include) {
    this._event = event;
  }

  get includer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get includee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class IncludeeStatusUpdate extends ethereum.Event {
  get params(): IncludeeStatusUpdate__Params {
    return new IncludeeStatusUpdate__Params(this);
  }
}

export class IncludeeStatusUpdate__Params {
  _event: IncludeeStatusUpdate;

  constructor(event: IncludeeStatusUpdate) {
    this._event = event;
  }

  get observer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get includedCompany(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get otherParty(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get included(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class Contract__companiesResult {
  value0: string;
  value1: Address;
  value2: string;
  value3: boolean;
  value4: string;

  constructor(
    value0: string,
    value1: Address,
    value2: string,
    value3: boolean,
    value4: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getWalletAddress(): Address {
    return this.value1;
  }

  getProfilePhoto(): string {
    return this.value2;
  }

  getHasToken(): boolean {
    return this.value3;
  }

  getTokenName(): string {
    return this.value4;
  }
}

export class Contract__ecoMappingResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getIncludesInEco(): boolean {
    return this.value0;
  }

  getCreatedTimestamp(): BigInt {
    return this.value1;
  }

  getRemovedTimestamp(): BigInt {
    return this.value2;
  }
}

export class Contract__getInclusionInfoResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getIncludesInEco(): boolean {
    return this.value0;
  }

  getCreatedTimestamp(): BigInt {
    return this.value1;
  }

  getRemovedTimestamp(): BigInt {
    return this.value2;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  companies(param0: Address): Contract__companiesResult {
    let result = super.call(
      "companies",
      "companies(address):(string,address,string,bool,string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__companiesResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBoolean(),
      result[4].toString()
    );
  }

  try_companies(
    param0: Address
  ): ethereum.CallResult<Contract__companiesResult> {
    let result = super.tryCall(
      "companies",
      "companies(address):(string,address,string,bool,string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__companiesResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBoolean(),
        value[4].toString()
      )
    );
  }

  companyAddressAtIndex(index: BigInt): Address {
    let result = super.call(
      "companyAddressAtIndex",
      "companyAddressAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_companyAddressAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "companyAddressAtIndex",
      "companyAddressAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  companyAddresses(param0: BigInt): Address {
    let result = super.call(
      "companyAddresses",
      "companyAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_companyAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "companyAddresses",
      "companyAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ecoMapping(param0: Address, param1: Address): Contract__ecoMappingResult {
    let result = super.call(
      "ecoMapping",
      "ecoMapping(address,address):(bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Contract__ecoMappingResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_ecoMapping(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Contract__ecoMappingResult> {
    let result = super.tryCall(
      "ecoMapping",
      "ecoMapping(address,address):(bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__ecoMappingResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getInclusionInfo(
    _company1: Address,
    _company2: Address
  ): Contract__getInclusionInfoResult {
    let result = super.call(
      "getInclusionInfo",
      "getInclusionInfo(address,address):(bool,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_company1),
        ethereum.Value.fromAddress(_company2)
      ]
    );

    return new Contract__getInclusionInfoResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getInclusionInfo(
    _company1: Address,
    _company2: Address
  ): ethereum.CallResult<Contract__getInclusionInfoResult> {
    let result = super.tryCall(
      "getInclusionInfo",
      "getInclusionInfo(address,address):(bool,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_company1),
        ethereum.Value.fromAddress(_company2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getInclusionInfoResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  totalCompanies(): BigInt {
    let result = super.call("totalCompanies", "totalCompanies():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalCompanies(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCompanies",
      "totalCompanies():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddCompanyCall extends ethereum.Call {
  get inputs(): AddCompanyCall__Inputs {
    return new AddCompanyCall__Inputs(this);
  }

  get outputs(): AddCompanyCall__Outputs {
    return new AddCompanyCall__Outputs(this);
  }
}

export class AddCompanyCall__Inputs {
  _call: AddCompanyCall;

  constructor(call: AddCompanyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _profilePhoto(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _hasToken(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _tokenName(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddCompanyCall__Outputs {
  _call: AddCompanyCall;

  constructor(call: AddCompanyCall) {
    this._call = call;
  }
}

export class UpdateEcosystemCall extends ethereum.Call {
  get inputs(): UpdateEcosystemCall__Inputs {
    return new UpdateEcosystemCall__Inputs(this);
  }

  get outputs(): UpdateEcosystemCall__Outputs {
    return new UpdateEcosystemCall__Outputs(this);
  }
}

export class UpdateEcosystemCall__Inputs {
  _call: UpdateEcosystemCall;

  constructor(call: UpdateEcosystemCall) {
    this._call = call;
  }

  get _company2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _includesInEco(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateEcosystemCall__Outputs {
  _call: UpdateEcosystemCall;

  constructor(call: UpdateEcosystemCall) {
    this._call = call;
  }
}
